Help on package django.conf in django:

NNAAMMEE
    django.conf - Settings and configuration for Django.

FFIILLEE
    /home/ramakrishna/Desktop/Django/Product/env/local/lib/python2.7/site-packages/django/conf/__init__.py

DDEESSCCRRIIPPTTIIOONN
    Values will be read from the module specified by the DJANGO_SETTINGS_MODULE environment
    variable, and then from django.conf.global_settings; see the global settings file for
    a list of all possible variables.

PPAACCKKAAGGEE  CCOONNTTEENNTTSS
    app_template (package)
    global_settings
    locale (package)
    urls (package)

CCLLAASSSSEESS
    __builtin__.object
        BaseSettings
            Settings
            UserSettingsHolder
    django.utils.functional.LazyObject(__builtin__.object)
        LazySettings
    
    class BBaasseeSSeettttiinnggss(__builtin__.object)
     |  Common logic for settings whether set by a module or by the user.
     |  
     |  Methods defined here:
     |  
     |  ____sseettaattttrr____(self, name, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class LLaazzyySSeettttiinnggss(django.utils.functional.LazyObject)
     |  A lazy proxy for either global Django settings or a custom settings object.
     |  The user can manually configure settings prior to using them. Otherwise,
     |  Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.
     |  
     |  Method resolution order:
     |      LazySettings
     |      django.utils.functional.LazyObject
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____ggeettaattttrr____(self, name)
     |  
     |  ccoonnffiigguurree(self, default_settings=<module 'django.conf.global_settings' from '/hom...7/site-packages/django/conf/global_settings.pyc'>, **options)
     |      Called to manually configure the settings. The 'default_settings'
     |      parameter sets where to retrieve any unspecified values from (its
     |      argument must support attribute access (__getattr__)).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ccoonnffiigguurreedd
     |      Returns True if the settings have already been configured.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.utils.functional.LazyObject:
     |  
     |  ____ccoonnttaaiinnss____ = inner(self, *args)
     |  
     |  ____ddeeeeppccooppyy____(self, memo)
     |  
     |  ____ddeellaattttrr____(self, name)
     |  
     |  ____ddeelliitteemm____ = inner(self, *args)
     |  
     |  ____ddiirr____ = inner(self, *args)
     |  
     |  ____eeqq____ = inner(self, *args)
     |  
     |  ____ggeettiitteemm____ = inner(self, *args)
     |  
     |  ____ggeettssttaattee____(self)
     |      # Because we have messed with __class__ below, we confuse pickle as to what
     |      # class we are pickling. It also appears to stop __reduce__ from being
     |      # called. So, we define __getstate__ in a way that cooperates with the way
     |      # that pickle interprets this class.  This fails when the wrapped class is
     |      # a builtin, but it is better than nothing.
     |  
     |  ____hhaasshh____ = inner(self, *args)
     |  
     |  ____iinniitt____(self)
     |  
     |  ____lleenn____ = inner(self, *args)
     |  
     |  ____nnee____ = inner(self, *args)
     |  
     |  ____nnoonnzzeerroo____ = inner(self, *args)
     |  
     |  ____rreedduuccee__eexx____(self, proto)
     |  
     |  ____sseettaattttrr____(self, name, value)
     |  
     |  ____sseettiitteemm____ = inner(self, *args)
     |  
     |  ____ssttrr____ = inner(self, *args)
     |  
     |  ____uunniiccooddee____ = inner(self, *args)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from django.utils.functional.LazyObject:
     |  
     |  ____nneewwoobbjj____(cls, *args) from __builtin__.type
     |      # Python 3.3 will call __reduce__ when pickling; this method is needed
     |      # to serialize and deserialize correctly.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.utils.functional.LazyObject:
     |  
     |  ____ccllaassss____
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSeettttiinnggss(BaseSettings)
     |  Method resolution order:
     |      Settings
     |      BaseSettings
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, settings_module)
     |  
     |  iiss__oovveerrrriiddddeenn(self, setting)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseSettings:
     |  
     |  ____sseettaattttrr____(self, name, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseSettings:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class UUsseerrSSeettttiinnggssHHoollddeerr(BaseSettings)
     |  Holder for user configured settings.
     |  
     |  Method resolution order:
     |      UserSettingsHolder
     |      BaseSettings
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____ddeellaattttrr____(self, name)
     |  
     |  ____ddiirr____(self)
     |  
     |  ____ggeettaattttrr____(self, name)
     |  
     |  ____iinniitt____(self, default_settings)
     |      Requests for configuration variables not in this class are satisfied
     |      from the module specified in default_settings (if possible).
     |  
     |  ____sseettaattttrr____(self, name, value)
     |  
     |  iiss__oovveerrrriiddddeenn(self, setting)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  SSEETTTTIINNGGSS__MMOODDUULLEE = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseSettings:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)

DDAATTAA
    EENNVVIIRROONNMMEENNTT__VVAARRIIAABBLLEE = 'DJANGO_SETTINGS_MODULE'
    eemmppttyy = <object object>
    sseettttiinnggss = <django.conf.LazySettings object>

